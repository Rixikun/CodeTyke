{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/QuestionSelection.js","components/QuestionSelectionArea.js","components/Button.js","components/QuestionBody.js","components/ProgressBar.js","components/PageLoader.js","components/LearningModule.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","id","alt","src","Footer","QuestionSelection","props","className","selection","image","onChange","event","currentSelectionIndex","newCheckboxStatus","checkboxStatus","map","status","index","target","checked","setCheckboxStatus","handleCheckbox","type","text","QuestionSelectionArea","React","useState","firstTwoAnswers","secondTwoAnswers","possibleAnswers","push","key","class","Button","label","icon","onClick","handleSubmit","style","display","loading","defaultProps","QuestionBody","currentQuestion","title","additionalInfo","setLoading","totalQuestions","getQuestion","nextQuestionId","ProgressBar","questionObj","progressBarFill","borderRadius","width","Math","ceil","PageLoader","LearningModule","setCurrentQuestion","useEffect","questionId","setTimeout","fetch","then","res","json","data","progressBar","questionBody","pageLoader","App","learningModule","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03233ed5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n  return (\n    <div id=\"navbarContainer\">\n      <div id=\"navbarContent\">\n        <img alt=\"logo\" src=\"assets/logo.png\" />\n      </div>\n    </div>\n  )\n}\n\nexport default Navbar;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div id=\"footerContainer\">\n      <div id=\"footerContent\">\n        <small id=\"copyright\">&copy; Codetyke 2020</small>\n        <small id=\"reserved\">All rights reserved</small>\n        <small id=\"footerSlogan\">Get ready to start coding!</small>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\n\nconst QuestionSelection = (props) => {\n\n  const handleCheckbox=(event, currentSelectionIndex)=>{\n    let newCheckboxStatus = props.checkboxStatus.map((status, index)=>{\n      if(index === currentSelectionIndex){\n        return event.target.checked;\n      } else {\n        return status;\n      }\n    })\n    props.setCheckboxStatus(newCheckboxStatus);\n  }\n\n   return(\n     <div className=\"selectionBox\">\n       <div className=\"selectionImageContainer\">\n         <img alt=\"\" src={props.selection.image} />\n       </div>\n       <div className=\"checkboxText\">\n         <input onChange={(event)=>handleCheckbox(event, props.index)} className=\"checkbox\" type=\"checkbox\" />\n         <span className=\"selectionText\">{props.selection.text}</span>\n       </div>\n     </div>\n   )\n}\n\n\nexport default QuestionSelection;\n","import React from 'react';\nimport QuestionSelection from './QuestionSelection';\n\nconst QuestionSelectionArea = (props) => {\n\n  const [checkboxStatus, setCheckboxStatus] = React.useState([false, false, false, false]);\n\n  var firstTwoAnswers = [],\n      secondTwoAnswers = [];\n\n   props.possibleAnswers.map((selection, index)=>{\n     if(index < 2){\n       firstTwoAnswers.push(<QuestionSelection key={index} selection={selection} index={index}  checkboxStatus={checkboxStatus}  setCheckboxStatus={setCheckboxStatus} />)\n     } else {\n       secondTwoAnswers.push(<QuestionSelection key={index} selection={selection} index={index}  checkboxStatus={checkboxStatus}  setCheckboxStatus={setCheckboxStatus} />)\n     }\n   })\n\n    return(\n      <div id=\"questionsBox\">\n        <div class=\"flex-space-evenly\">\n          <div class=\"flex-row\">\n            {firstTwoAnswers}\n          </div>\n          <div class=\"flex-row\">\n            {secondTwoAnswers}\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default QuestionSelectionArea;\n","import React from 'react';\n\nconst Button = (props) => {\n\n  let label = props.label;\n  let className = `submitButton ${props.type}`;\n  let icon = props.icon;\n\n  return (\n    <div className={className} onClick={props.handleSubmit} >\n      <div className=\"submitLoader\" style={{display: props.loading ? \"inline\" : \"none\"}}><img src='/assets/loadingLogo.png' /></div>\n      {label}\n      {icon}\n    </div>\n  )\n}\n\nButton.defaultProps = {\n  label: \"Submit\",\n  type: \"disabled\"\n};\n\nexport default Button;\n","import React from 'react';\nimport QuestionSelectionArea from './QuestionSelectionArea';\nimport Button from './Button';\n\n\nconst QuestionBody = (props) => {\n\n    const handleSubmit=(event)=>{\n\n      // if button inactive prompt to select answer\n\n      // else check for correct answer\n        //handle incorrect\n\n        // handle correct\n\n      props.setLoading(true);\n      if(props.currentQuestion.id >= props.currentQuestion.totalQuestions){\n        props.getQuestion(1);\n      } else {\n        props.getQuestion(props.currentQuestion.nextQuestionId);\n      }\n    }\n\n    return (\n      <>\n        <div id=\"questionHeaderContainer\">\n          <div id=\"questionHeader\">\n            {props.currentQuestion.title}\n          </div>\n          <div id=\"questionSubHeader\">\n            {props.currentQuestion.additionalInfo}\n          </div>\n        </div>\n        <div id=\"outerBox\">\n          <QuestionSelectionArea possibleAnswers={props.currentQuestion.possibleAnswers} />\n          <div id=\"submitButtonContainer\">\n            <Button handleSubmit={handleSubmit} loading={props.loading} />\n          </div>\n        </div>\n      </>\n    )\n}\n\n// className={`submitButton ${checkboxStatus.includes(true) ? \"active\" : \"disabled\"}`}\n\nexport default QuestionBody;\n","import React from 'react';\n\nconst ProgressBar = (props) => {\n  const getStyles = (questionObj) => ({\n    borderRadius: questionObj.id === questionObj.totalQuestions ? \"20px\" : \"20px 0px 0px 20px\",\n    width: Math.ceil((questionObj.id / questionObj.totalQuestions) * 100) + \"%\"\n  });\n\n  const progressBarFill = getStyles(props.currentQuestion);\n  return(\n    <div className=\"progressBarContainer\">\n      <div className=\"barFill\" style={progressBarFill} />\n      <div className=\"barBg\">\n        <div className=\"line\" />\n        <div className=\"circle\" />\n      </div>\n    </div>\n  )\n}\n\nexport default ProgressBar;\n","import React from 'react';\n\nconst PageLoader = (props) => {\n  return (<div class=\"loader\"><span></span></div>)\n}\n\nexport default PageLoader;\n","import React from 'react';\nimport QuestionBody from './QuestionBody';\nimport ProgressBar from './ProgressBar';\nimport PageLoader from './PageLoader';\n\n\nconst LearningModule = (props) => {\n  const [currentQuestion, setCurrentQuestion] = React.useState({});\n  const [loading, setLoading] = React.useState(false);\n\n  React.useEffect(()=>{\n    getQuestion(1);\n  },[]);\n\n  const getQuestion=(questionId)=>{\n    setTimeout(() =>{\n      fetch(\"http://localhost:8080/problems/\"+questionId).then((res)=>{\n        return res.json();\n      }).then((data)=>{\n        setCurrentQuestion(data);\n        setLoading(false);\n      })\n    },\n    1500)\n  }\n\n  if(currentQuestion.id){\n    var progressBar = <ProgressBar currentQuestion={currentQuestion}/>\n    var questionBody = <QuestionBody currentQuestion={currentQuestion} getQuestion={getQuestion} loading={loading} setLoading={setLoading}/>\n  } else {\n    var pageLoader = <PageLoader />;\n  }\n\n  return (\n    <div class=\"learning-module\">\n      {progressBar}\n      {questionBody}\n      {pageLoader}\n    </div>\n  )\n}\n\nexport default LearningModule;\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport LearningModule from './components/LearningModule';\nimport './App.scss';\n\n\nfunction App() {\n\n  //TODO: LearningModule should take props.id to kick off api call\n\n  // if(learningModule.id){\n    var learningModule = <LearningModule />\n  // } else {\n    // var pageLoader = <PageLoader />;\n  // }\n\n  return (\n    <div>\n      <Navbar />\n      <div id=\"mainWrapper\">\n        {learningModule}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}